#!/usr/bin/expect
set timeout 60
set match_max 100000
set hostname [lindex $argv 0]; #This will be publisher node fqdn
set osadmin1 [lindex $argv 1]; #Publisher osadmn user name
set password1 [lindex $argv 2]; #Publisher osadmin name
set logfile [lindex $argv 3]; #
set usesame [lindex $argv 4]; #Will be t , if subscriber uses osadmin1 and password1, otherwise f

if { $usesame == "f"} { 
    puts "Extra Variables are there"
    set osadmin2 [lindex $argv 5]
    set password2 [lindex $argv 6]
} else {
    puts "No extra variables"
}
#******************************************************************************
# Change order of executing commands to the following
# 1. show network cluster
# 2. show network eth0
# 3. show uccx version
# 4. show hardware

# 1. show network cluster (Add)
#       check to see if the hostname $argv 0 matches fqdn of the publisher.
#       If hostname argv 0 doesn't match the line with Publisher.
#       send_log "\nerror: $hostname is not the Publisher.\nPlease enter the Publisher information.\n"
#       End the script

# 2. show network eth0 (No changes)

# 3. show uccx version (No Changes)

# 4. show hardware (Add)
#    If the show hardware only has 1 disk on Publisher, set pubvmdisk2 uccxs:vm_disk2:NA

# Checking additional node.
# 1. show network cluster (Remove code checking for Publisher. This code should only check for Subscriber information)
        set subprimary "uccxs:is_primary:0"
# 2. show network eth0 (No changes)

# 3. show uccx version (No Changes)

# 4. show hardware (Add)
#    If the show hardware only has 1 disk on Sublisher, set subvmdisk2 uccxs:vm_disk2:NA

#******************************************************************************

log_user 0


#Starts a new log file each time it runs
log_file -noappend $logfile

#Checks the variables being passed into the script
if {[llength $argv] == 0} {
    send_user "Usage: scriptname, publisher fqdn,osadmin os user, os password, sub uses same user and password, sub osadmin, sub ospassword\n"
    exit 1
}

#Starts the SSH process and surpresses the key accept

spawn ssh -q -o StrictHostKeyChecking=no $osadmin1@$hostname



#Checks the return and looks for password prompt

expect {
    timeout {
    log_user 1 
    send_log "\nlogin_status: failed\nlogin_error: failed to get password prompt\n\n"; 
    exit 1 
    }
    eof {
    log_user 1 
    send_log "\nlogin_status: failed\nlogin_error: unable to reach $hostname\n\n"; 
    exit 1 
    }
    "*assword" {
        send "$password1\r"
        expect {
            "*dmin:" {
                log_user 1
                send_log "\nlogin_status: success\nlogin_error:\n\n";    
                send "\r"
            }
            "*assword"
            {
                log_user 1
                send_log "\nlogin_status: failed\nlogin_error: username or password is invlaid\n\n"; 
                exit 1
            }
            
     }
   }
}
log_user 0
        expect "*dmin:"
        puts "Running show network cluster command ..."
        send "show network cluster\r"
        expect "*dmin:"
        set pubsub $expect_out(buffer)
        puts $pubsub

#----------------------------------------------------------- network cluster formatting

# split across lines
set splits [split $pubsub "\n"]

#variables to save secondary node, subscriber domain, details
set foundanother 0
set subsdns ""

# for each node
foreach item $splits {
    if { [string first "Publisher" $item] != -1 } {
        puts "Publisher Present"
        # find IP address
        set ips [regexp -all -inline {\d+\.\d+\.\d+\.\d+} $item]
        # separate each space separated string
        set itm [regexp -all -inline {\S+} $item]
        foreach val $itm {
            # check whether this is a valid domain or not
            if { [regexp {[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+} $val] == 1} {
                # valid domain found
                set dns [regexp -all -inline {[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+} $val]
            }
        }
        set dns [string trim $dns]
        puts $dns 
        puts $hostname
        if { $dns != $hostname } {
            send_log "\nerror: $hostname is not the Publisher.\nPlsaee enter the Publisher information.\n"
            exit 1
        }
        # assigning variables
        puts "Found DNS $dns"
        set publisher "uccxs:name:$dns"
        set pubprimary "uccxs:is_primary:1"
        set pubnodetype "uccxs:node_type:contactcenterxpress"
    } elseif { [string first "Subscriber" $item ] != -1 } {
        puts "Subscriber Present"
        set ips [regexp -all -inline {\d+\.\d+\.\d+\.\d+} $item]
        # separate each space separated string
        set itm [regexp -all -inline {\S+} $item]

        foreach val $itm {
            # check whether this is a valid domain or not
            if { [regexp {[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+} $val] == 1} {
                # valid domain found
                set foundanother 1
                set dns [regexp -all -inline {[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+} $val]
                set subsdns $dns
            }
        }
        puts "Found DNS $dns"
        set subscriber "uccxs:name:$dns"
        set subprimary "uccxs:is_primary:0"
        set subnodetype "uccxs:node_type:contactcenterxpress"
    }
}

#------ rest commands----------------
        puts "Running show network eth0 command ..."
        send "show network eth0\r"
        expect "*dmin:"
        set ip $expect_out(buffer)
        puts $ip

        puts "Running show uccx version command ..."
        send "show uccx version\r"
        expect "*dmin:"
        set version $expect_out(buffer)
        puts $version

        puts "Running utils ntp server list command ..."
        send "utils ntp server list\r"
        expect "*dmin:"
        set ntp $expect_out(buffer)
        puts $ntp

        puts "Running show hardware command ..."
        send "show hardware\r"
        expect "*dmin:"
        set hw $expect_out(buffer)
        puts $hw





#--------------------------------- show network eth0 ----------------------

#puts $ip
# now we will create key value pairs of Ip Address, DNS, Domain and more
set records [regexp -all -inline {(\w+\s\w+:\s[a-zA-Z0-9.]+|\w+\s+:\s[a-zA-Z0-9.]+|\w+\s\w+\s:\s[a-zA-Z0-9.]+)} $ip]

# sometimes regex works unexpected so including the point to remove unnecessary duplicates
set records [lsort -unique $records]

# Now we have key value pair list so iterate over it, find key like Address for IP Address
# Primary for Primary DNS and so on
# as soon you filter it out, use the actual values to log in custom format
# now you can run this undestand what it do

foreach item $records {
    set keyval [split $item ":"]
    set key [lindex $keyval 0]
    if { [string first "Address" $key] != -1 } {
        set pubipadd "uccxs:ip4_add:[lindex $keyval 1]"
    } elseif { [string first "Primary" $key] != -1 } {
        set pubdns1 "uccxs:dns1:[lindex $keyval 1]"
    } elseif { [string first "Secondary" $key] != -1 } {
        if {[string first "Not" [lindex $keyval 1]] != -1} {
           set pubdns2 "uccxs:dns2:Not Configured"
        } else {
           set pubdns2 "uccxs:dns2:[lindex $keyval 1]"
        }
    } elseif { [string first "Domain" $key] != -1} {
        set pubdomain "uccxs:domain:[lindex $keyval 1]"
    } elseif { [string first "Gateway" $key] != -1 } {
        set pubipgateway "uccxs:ip4_gateway:[lindex $keyval 1]"
    } elseif { [string first "Mask" $key] != -1 } {
        set pubipmask "uccxs:ip4_mask:[lindex $keyval 1]"
    }
 }

#--------------------------------------------------------- uccx version

# separate each line
set line [split $version "\n"]

# for each line, check have key value pairs
foreach item $line {
    # check for key value string, only one colon
    if { [string first ":" $item] != -1 } {
        # find key value pair
        set keyval [split $item ":"]
        set key [lindex $keyval 0]
        set val [lindex $keyval 1]
        if { [string first "Active" $key] != -1 } {
            set pubactive "uccxs:active_version:$val"
            puts $pubactive 
        } elseif { [string first "Inactive" $key] != -1 } {
            set pubinactive "uccxs:inactive_version:$val"
            puts $pubinactive
        }
    }
}

#----------------------------------- ntp utils

#split across lines
set lines [split $ntp "\n"]
# i for saving variable from ntp1
set i 1
foreach line $lines {
    # check whether it's domain/IP or not
    if { [regexp {(\d+\.\d+\.\d+\.\d+|[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+)} $line] == 1} {
        set nps [regexp -all -inline {(\d+\.\d+\.\d+\.\d+|[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+)} $line]
        set nps [lsort -unique $nps]
        set pubntp$i "uccxs:ntp$i:$nps"
        incr i
    }
}
while { $i < 6 } {
    set pubntp$i "uccxs:ntp$i:NA"
    incr i
}
puts $pubntp1
puts $pubntp2
puts $pubntp3
puts $pubntp4
puts $pubntp5




send_log "UCCX Publisher Information\n"
send_log "$publisher\n"
send_log "$pubprimary\n"
send_log "$pubnodetype\n"
send_log "$pubipadd\n"
send_log "$pubipmask\n"
send_log "$pubipgateway\n"
send_log "$pubdomain\n"
send_log "$pubdns1\n"
send_log "$pubdns2\n"
send_log "$pubactive\n"
send_log "$pubinactive\n"
send_log "$pubntp1\n"
send_log "$pubntp2\n"
send_log "$pubntp3\n"
send_log "$pubntp4\n"
send_log "$pubntp5\n"

#--------------------------------------------- show hardware -------------
# split across lines
puts "can you run this for me?"
set lines [split $hw "\n"]

# disk counts
set dcc 0
# for each line
foreach line $lines {
    set rc [regexp -all -inline {\w+\s+:\s\d} $line]
    foreach itm $rc {
        if { [string first "Processors" $itm] != -1 } {
            set spt [split $itm ":"]
            set cpuc [lindex $spt 1]
            set cpuc [string trim $cpuc]
            set pubvmcpu "uccxs:vm_cpu:$cpuc"
            puts $pubvmcpu
        } elseif { [string first "Disks" $itm] != -1 } {
            set spt [split $itm ":"]
            set dc [lindex $spt 1]
            set dc [string trim $dc]
        }
    }
    set disks [regexp -all -inline {Size\s[a-zA-Z0-9() ]+:\s\d+} $line]
    foreach disk $disks {
        set itm [split $disk ":"]
        set dck [lindex $itm 1]
        set dsksize [string trim $dck]
        set sizestr [lindex $itm 0]
        if { [ string first "TB" $sizestr] != -1} {
            append dsksize "TB"
            incr dcc
            set pubvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
            
        } elseif { [ string first "PB" $sizestr] != -1} {
            append dsksize "PB"
            incr dcc
            set pubvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
        } elseif { [ string first "GB" $sizestr] != -1} {
            append dsksize "GB"
            incr dcc
            set pubvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
        }
    }
    while { $dcc <= 2} {
        puts "$dcc"
        incr dcc
        set pubvmdisk$dcc "uccxs:vm_disk$dcc:NA"
    }
    set type [regexp -all -inline {\w+\s+:\s.+} $line]
    foreach item $type {
        if { [ string first "Type" $item ] != -1  } {
            set spt [split $item ":"]
            set desc [lindex $spt 1]
            set desc [string range $desc 1 end]
            set pubvmproctype "uccxs:vm_type:$desc"
            puts $pubvmproctype
        } elseif { [string first "Memory" $item ] != -1 } {
            set spt [split $item ":"]
            set desc [lindex $spt 1]
            set desc [string range $desc 1 end]
            set pubvmmem "uccxs:vm_ram:$desc"
            puts $pubvmmem
        }
    }
}
log_user 0


catch {
send_log "$pubvmcpu\n"
send_log "$pubvmproctype\n"
send_log "$pubvmmem\n"
send_log "$pubvmdisk1\n"
send_log "$pubvmdisk2\n"
} errmsg
puts $errmsg



# ---------------------------------Get Subscriber Information --------------------------------

if { $foundanother == 1 } {
    puts "Getting details of Subscriber Node"

    #******************************************************************************

    log_user 0

    #Starts the SSH process and surpresses the key accept
    if { $usesame == "f"} { 
        spawn ssh -q -o StrictHostKeyChecking=no $osadmin2@$subsdns
    } else {
        puts "Trying to connect to subscriber ..."
        spawn ssh -q -o StrictHostKeyChecking=no $osadmin1@$subsdns
        puts "Connected ..."
    }
    puts "Connrected"



    #Checks the return and looks for password prompt

    expect {
        timeout {
        log_user 1 
        send_log "\nlogin_status: failed\nlogin_error: failed to get password prompt\n\n"; 
        exit 1 
        }
        eof {
        log_user 1 
        send_log "\nlogin_status: failed\nlogin_error: unable to reach $hostname\n\n"; 
        exit 1 
        }
        "*assword" {
            if { $usesame == "f" } {
                send "$password2\r"
            } else {
                send "$password1\r"
            }
            expect {
                "*dmin:" {
                    log_user 1
                    send_log "\nlogin_status: success\nlogin_error:\n\n";    
                    send "\r"
                }
                "*assword"
                {
                    log_user 1
                    send_log "\nlogin_status: failed\nlogin_error: username or password is invlaid\n\n"; 
                    exit 1
                }
                
         }
       }
    }

log_user 0
        expect "*dmin:"
        puts "Running show network cluster command ..."
        send "show network cluster\r"
        expect "*dmin:"
        set pubsub $expect_out(buffer)
        puts $pubsub

        puts "Running show network eth0 command ..."
        send "show network eth0\r"
        expect "*dmin:"
        set ip $expect_out(buffer)
        puts $ip

        puts "Running show uccx version command ..."
        send "show uccx version\r"
        expect "*dmin:"
        set version $expect_out(buffer)
        puts $version

        puts "Running utils ntp server list command ..."
        send "utils ntp server list\r"
        expect "*dmin:"
        set ntp $expect_out(buffer)
        puts $ntp

        puts "Running show hardware command ..."
        send "show hardware\r"
        expect "*dmin:"
        set hw $expect_out(buffer)
        puts $hw




#puts $ip
# now we will create key value pairs of Ip Address, DNS, Domain and more
set records [regexp -all -inline {(\w+\s\w+:\s[a-zA-Z0-9.]+|\w+\s+:\s[a-zA-Z0-9.]+|\w+\s\w+\s:\s[a-zA-Z0-9.]+)} $ip]

# sometimes regex works unexpected so including the point to remove unnecessary duplicates
set records [lsort -unique $records]

# Now we have key value pair list so iterate over it, find key like Address for IP Address
# Primary for Primary DNS and so on
# as soon you filter it out, use the actual values to log in custom format
# now you can run this undestand what it do

foreach item $records {
    set keyval [split $item ":"]
    set key [lindex $keyval 0]
    if { [string first "Address" $key] != -1 } {
        set subipadd "uccxs:ip4_add:[lindex $keyval 1]"
    } elseif { [string first "Primary" $key] != -1 } {
        set subdns1 "uccxs:dns1:[lindex $keyval 1]"
    } elseif { [string first "Secondary" $key] != -1 } {
        if {[string first "Not" [lindex $keyval 1]] != -1} {
           set subdns2 "uccxs:dns2:Not Configured"
        } else {
           set subdns2 "uccxs:dns2:[lindex $keyval 1]"
        }
    } elseif { [string first "Domain" $key] != -1} {
        set subdomain "uccxs:domain:[lindex $keyval 1]"
    } elseif { [string first "Gateway" $key] != -1 } {
        set subipgateway "uccxs:ip4_gateway:[lindex $keyval 1]"
    } elseif { [string first "Mask" $key] != -1 } {
        set subipmask "uccxs:ip4_mask:[lindex $keyval 1]"
    }
 }

#----------------------------------------------------------- network cluster formatting

# split across lines
puts "\n\n"
puts $pubsub 
puts "\n\n"
set splits [split $pubsub "\n"]

#variables to save secondary node, subscriber domain, details
set foundanother 0
set subsdns ""

# for each node
foreach item $splits {
    if { [string first "Subscriber" $item ] != -1 } {
        puts "Subscriber Present"
        set ips [regexp -all -inline {\d+\.\d+\.\d+\.\d+} $item]
        # separate each space separated string
        set itm [regexp -all -inline {\S+} $item]

        foreach val $itm {
            # check whether this is a valid domain or not
            if { [regexp {[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+} $val] == 1} {
                # valid domain found
                set foundanother 1
                set dns [regexp -all -inline {[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+} $val]
                set subsdns $dns
            }
        }
        puts "Found DNS $dns"
        set subscriber "uccxs:name:$dns"
        set subprimary "uccxs:is_primary:0"
        set subnodetype "uccxs:node_type:contactcenterxpress"
    }
}

#--------------------------------------------------------- uccx version

# separate each line
set line [split $version "\n"]

# for each line, check have key value pairs
foreach item $line {
    # check for key value string, only one colon
    if { [string first ":" $item] != -1 } {
        # find key value pair
        set keyval [split $item ":"]
        set key [lindex $keyval 0]
        set val [lindex $keyval 1]
        if { [string first "Active" $key] != -1 } {
            set subactive "uccxs:active_version:$val"
            puts $subactive 
        } elseif { [string first "Inactive" $key] != -1 } {
            set subinactive "uccxs:inactive_version:$val"
            puts $subinactive
        }
    }
}

#----------------------------------- ntp utils

#split across lines
set lines [split $ntp "\n"]
# i for saving variable from ntp1
set i 1
foreach line $lines {
    # check whether it's domain/IP or not
    if { [regexp {(\d+\.\d+\.\d+\.\d+|[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+)} $line] == 1} {
        set nps [regexp -all -inline {(\d+\.\d+\.\d+\.\d+|[A-Za-z0-9-]+\.[A-Za-z0-9-]+\.[A-Za-z0-9-]+)} $line]
        set nps [lsort -unique $nps]
        set subntp$i "uccxs:ntp$i:$nps"
        incr i
    }
}
while { $i < 6 } {
    set subntp$i "uccxs:ntp$i:NA"
    incr i
}

#--------------------------------------------- show hardware -------------
# split across lines
puts "can you run this for me?"
set lines [split $hw "\n"]

# disk counts
set dcc 0

# for each line
foreach line $lines {
    set rc [regexp -all -inline {\w+\s+:\s\d} $line]
    foreach itm $rc {
        if { [string first "Processors" $itm] != -1 } {
            set spt [split $itm ":"]
            set cpuc [lindex $spt 1]
            set cpuc [string trim $cpuc]
            set subvmcpu "uccxs:vm_cpu:$cpuc"
            puts $subvmcpu
        } elseif { [string first "Disks" $itm] != -1 } {
            set spt [split $itm ":"]
            set dc [lindex $spt 1]
            set dc [string trim $dc]
        }
    }
    set disks [regexp -all -inline {Size\s[a-zA-Z0-9() ]+:\s\d+} $line]
    foreach disk $disks {
        set itm [split $disk ":"]
        set dck [lindex $itm 1]
        set dsksize [string trim $dck]
        set sizestr [lindex $itm 0]
        if { [ string first "MB" $sizestr] != -1 } {
            append dsksize "MB"
            incr dcc
            set subvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
            
        } elseif { [ string first "KB" $sizestr] != -1 } {
            append dsksize "KB"
            incr dcc
            set subvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
            
        } elseif { [ string first "TB" $sizestr] != -1} {
            append dsksize "TB"
            incr dcc
            set subvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"

            
        } elseif { [ string first "PB" $sizestr] != -1} {
            append dsksize "PB"
            incr dcc
            set subvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
            
        } elseif { [ string first "GB" $sizestr] != -1} {
            append dsksize "GB"
            incr dcc
            set subvmdisk$dcc "uccxs:vm_disk$dcc:$dsksize"
            
        }
    }
    set dc 2
    while { $dcc <= $dc} {
        puts "$dcc"
        incr dcc
        set subvmdisk$dcc "uccxs:vm_disk$dcc:NA"
    }
    set type [regexp -all -inline {\w+\s+:\s.+} $line]
    foreach item $type {
        if { [ string first "Type" $item ] != -1  } {
            set spt [split $item ":"]
            set desc [lindex $spt 1]
            set desc [string range $desc 1 end]
            set subvmproctype "uccxs:vm_type:$desc"
            puts $subvmproctype
        } elseif { [string first "Memory" $item ] != -1 } {
            set spt [split $item ":"]
            set desc [lindex $spt 1]
            set desc [string range $desc 1 end]
            set subvmmem "uccxs:vm_ram:$desc"
            puts $subvmmem
        }
    }
}
catch { send_log "UCCX Subscriber Information\n"
send_log "$subscriber\n"
send_log "$subprimary\n"
send_log "$subnodetype\n"
send_log "$subipadd\n"
send_log "$subipmask\n"
send_log "$subipgateway\n"
send_log "$subdomain\n"
send_log "$subdns1\n"
send_log "$subdns2\n"
send_log "$subactive\n"
send_log "$subinactive\n"
send_log "$subntp1\n"
send_log "$subntp2\n"
send_log "$subntp3\n"
send_log "$subntp4\n"
send_log "$subntp5\n"
send_log "$subvmcpu\n"
send_log "$subvmproctype\n"
send_log "$subvmmem\n"
send_log "$subvmdisk1\n"
send_log "$subvmdisk2\n" } e
puts "Error : \n $e"
}